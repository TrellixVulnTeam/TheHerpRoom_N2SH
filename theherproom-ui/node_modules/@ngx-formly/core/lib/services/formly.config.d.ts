import { InjectionToken, ComponentRef } from '@angular/core';
import { ValidationErrors, AbstractControl } from '@angular/forms';
import { FieldType } from './../templates/field.type';
import { FormlyFieldConfig, FormlyFieldConfigCache } from '../components/formly.field.config';
import { Observable } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
export declare const FORMLY_CONFIG: InjectionToken<FormlyConfig>;
/** @experimental */
export interface FormlyExtension {
    prePopulate?(field: FormlyFieldConfig): void;
    onPopulate?(field: FormlyFieldConfig): void;
    postPopulate?(field: FormlyFieldConfig): void;
}
/**
 * Maintains list of formly field directive types. This can be used to register new field templates.
 */
export declare class FormlyConfig {
    types: {
        [name: string]: TypeOption;
    };
    validators: {
        [name: string]: ValidatorOption;
    };
    wrappers: {
        [name: string]: WrapperOption;
    };
    messages: {
        [name: string]: ValidationMessageOption['message'];
    };
    templateManipulators: {
        preWrapper: ManipulatorWrapper[];
        postWrapper: ManipulatorWrapper[];
    };
    extras: ConfigOption['extras'];
    extensions: {
        [name: string]: FormlyExtension;
    };
    addConfig(config: ConfigOption): void;
    setType(options: TypeOption | TypeOption[]): void;
    getType(name: string): TypeOption;
    getMergedField(field?: FormlyFieldConfig): any;
    /** @internal */
    resolveFieldTypeRef(field?: FormlyFieldConfigCache): ComponentRef<FieldType>;
    setWrapper(options: WrapperOption): void;
    getWrapper(name: string): WrapperOption;
    setTypeWrapper(type: string, name: string): void;
    setValidator(options: ValidatorOption): void;
    getValidator(name: string): ValidatorOption;
    addValidatorMessage(name: string, message: ValidationMessageOption['message']): void;
    getValidatorMessage(name: string): string | ((error: any, field: FormlyFieldConfig) => string | Observable<string>);
    setManipulator(manipulator: ManipulatorOption): void;
    private mergeExtendedType;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<FormlyConfig, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<FormlyConfig>;
}
export interface TypeOption {
    name: string;
    component?: any;
    wrappers?: string[];
    extends?: string;
    defaultOptions?: FormlyFieldConfig;
}
export interface WrapperOption {
    name: string;
    component: any;
    types?: string[];
}
export interface FieldValidatorFn {
    (c: AbstractControl, field: FormlyFieldConfig, options?: {
        [id: string]: any;
    }): ValidationErrors | null;
}
export interface ValidatorOption {
    name: string;
    validation: FieldValidatorFn;
    options?: {
        [id: string]: any;
    };
}
export interface ExtensionOption {
    name: string;
    extension: FormlyExtension;
}
export interface ValidationMessageOption {
    name: string;
    message: string | ((error: any, field: FormlyFieldConfig) => string | Observable<string>);
}
export interface ManipulatorOption {
    class?: {
        new (): any;
    };
    method?: string;
}
export interface ManipulatorWrapper {
    (f: FormlyFieldConfig): string;
}
export interface TemplateManipulators {
    preWrapper?: ManipulatorWrapper[];
    postWrapper?: ManipulatorWrapper[];
}
export interface ConfigOption {
    types?: TypeOption[];
    wrappers?: WrapperOption[];
    validators?: ValidatorOption[];
    extensions?: ExtensionOption[];
    validationMessages?: ValidationMessageOption[];
    /** @deprecated use `extensions` instead */
    manipulators?: ManipulatorOption[];
    extras?: {
        /** @deprecated use `extensions` instead */
        fieldTransform?: any;
        immutable?: boolean;
        showError?: (field: FieldType) => boolean;
        /**
         * Defines the option which formly rely on to check field expression properties.
         * - `modelChange`: perform a check when the value of the form control changes (Will be set by default in the next major version).
         * - `changeDetectionCheck`: triggers an immediate check when `ngDoCheck` is called.
         *
         * Defaults to `changeDetectionCheck`.
         */
        checkExpressionOn?: 'modelChange' | 'changeDetectionCheck';
        /**
         * Whether to lazily render field components or not when marked as hidden.
         * - `true`: lazily render field components (Will be set by default in the next major version).
         * - `false`: render field components and use CSS to control their visibility.
         *
         * Defaults to `false`.
         */
        lazyRender?: boolean;
        /**
         * When true, reset the value of hidden fields.
         *
         * Defaults to `false`.
         */
        resetFieldOnHide?: boolean;
    };
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybWx5LmNvbmZpZy5kLnRzIiwic291cmNlcyI6WyJmb3JtbHkuY29uZmlnLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGlvblRva2VuLCBDb21wb25lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFZhbGlkYXRpb25FcnJvcnMsIEFic3RyYWN0Q29udHJvbCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IEZpZWxkVHlwZSB9IGZyb20gJy4vLi4vdGVtcGxhdGVzL2ZpZWxkLnR5cGUnO1xuaW1wb3J0IHsgRm9ybWx5RmllbGRDb25maWcsIEZvcm1seUZpZWxkQ29uZmlnQ2FjaGUgfSBmcm9tICcuLi9jb21wb25lbnRzL2Zvcm1seS5maWVsZC5jb25maWcnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgRk9STUxZX0NPTkZJRzogSW5qZWN0aW9uVG9rZW48Rm9ybWx5Q29uZmlnPjtcbi8qKiBAZXhwZXJpbWVudGFsICovXG5leHBvcnQgaW50ZXJmYWNlIEZvcm1seUV4dGVuc2lvbiB7XG4gICAgcHJlUG9wdWxhdGU/KGZpZWxkOiBGb3JtbHlGaWVsZENvbmZpZyk6IHZvaWQ7XG4gICAgb25Qb3B1bGF0ZT8oZmllbGQ6IEZvcm1seUZpZWxkQ29uZmlnKTogdm9pZDtcbiAgICBwb3N0UG9wdWxhdGU/KGZpZWxkOiBGb3JtbHlGaWVsZENvbmZpZyk6IHZvaWQ7XG59XG4vKipcbiAqIE1haW50YWlucyBsaXN0IG9mIGZvcm1seSBmaWVsZCBkaXJlY3RpdmUgdHlwZXMuIFRoaXMgY2FuIGJlIHVzZWQgdG8gcmVnaXN0ZXIgbmV3IGZpZWxkIHRlbXBsYXRlcy5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgRm9ybWx5Q29uZmlnIHtcbiAgICB0eXBlczoge1xuICAgICAgICBbbmFtZTogc3RyaW5nXTogVHlwZU9wdGlvbjtcbiAgICB9O1xuICAgIHZhbGlkYXRvcnM6IHtcbiAgICAgICAgW25hbWU6IHN0cmluZ106IFZhbGlkYXRvck9wdGlvbjtcbiAgICB9O1xuICAgIHdyYXBwZXJzOiB7XG4gICAgICAgIFtuYW1lOiBzdHJpbmddOiBXcmFwcGVyT3B0aW9uO1xuICAgIH07XG4gICAgbWVzc2FnZXM6IHtcbiAgICAgICAgW25hbWU6IHN0cmluZ106IFZhbGlkYXRpb25NZXNzYWdlT3B0aW9uWydtZXNzYWdlJ107XG4gICAgfTtcbiAgICB0ZW1wbGF0ZU1hbmlwdWxhdG9yczoge1xuICAgICAgICBwcmVXcmFwcGVyOiBNYW5pcHVsYXRvcldyYXBwZXJbXTtcbiAgICAgICAgcG9zdFdyYXBwZXI6IE1hbmlwdWxhdG9yV3JhcHBlcltdO1xuICAgIH07XG4gICAgZXh0cmFzOiBDb25maWdPcHRpb25bJ2V4dHJhcyddO1xuICAgIGV4dGVuc2lvbnM6IHtcbiAgICAgICAgW25hbWU6IHN0cmluZ106IEZvcm1seUV4dGVuc2lvbjtcbiAgICB9O1xuICAgIGFkZENvbmZpZyhjb25maWc6IENvbmZpZ09wdGlvbik6IHZvaWQ7XG4gICAgc2V0VHlwZShvcHRpb25zOiBUeXBlT3B0aW9uIHwgVHlwZU9wdGlvbltdKTogdm9pZDtcbiAgICBnZXRUeXBlKG5hbWU6IHN0cmluZyk6IFR5cGVPcHRpb247XG4gICAgZ2V0TWVyZ2VkRmllbGQoZmllbGQ/OiBGb3JtbHlGaWVsZENvbmZpZyk6IGFueTtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgcmVzb2x2ZUZpZWxkVHlwZVJlZihmaWVsZD86IEZvcm1seUZpZWxkQ29uZmlnQ2FjaGUpOiBDb21wb25lbnRSZWY8RmllbGRUeXBlPjtcbiAgICBzZXRXcmFwcGVyKG9wdGlvbnM6IFdyYXBwZXJPcHRpb24pOiB2b2lkO1xuICAgIGdldFdyYXBwZXIobmFtZTogc3RyaW5nKTogV3JhcHBlck9wdGlvbjtcbiAgICBzZXRUeXBlV3JhcHBlcih0eXBlOiBzdHJpbmcsIG5hbWU6IHN0cmluZyk6IHZvaWQ7XG4gICAgc2V0VmFsaWRhdG9yKG9wdGlvbnM6IFZhbGlkYXRvck9wdGlvbik6IHZvaWQ7XG4gICAgZ2V0VmFsaWRhdG9yKG5hbWU6IHN0cmluZyk6IFZhbGlkYXRvck9wdGlvbjtcbiAgICBhZGRWYWxpZGF0b3JNZXNzYWdlKG5hbWU6IHN0cmluZywgbWVzc2FnZTogVmFsaWRhdGlvbk1lc3NhZ2VPcHRpb25bJ21lc3NhZ2UnXSk6IHZvaWQ7XG4gICAgZ2V0VmFsaWRhdG9yTWVzc2FnZShuYW1lOiBzdHJpbmcpOiBzdHJpbmcgfCAoKGVycm9yOiBhbnksIGZpZWxkOiBGb3JtbHlGaWVsZENvbmZpZykgPT4gc3RyaW5nIHwgT2JzZXJ2YWJsZTxzdHJpbmc+KTtcbiAgICBzZXRNYW5pcHVsYXRvcihtYW5pcHVsYXRvcjogTWFuaXB1bGF0b3JPcHRpb24pOiB2b2lkO1xuICAgIHByaXZhdGUgbWVyZ2VFeHRlbmRlZFR5cGU7XG59XG5leHBvcnQgaW50ZXJmYWNlIFR5cGVPcHRpb24ge1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBjb21wb25lbnQ/OiBhbnk7XG4gICAgd3JhcHBlcnM/OiBzdHJpbmdbXTtcbiAgICBleHRlbmRzPzogc3RyaW5nO1xuICAgIGRlZmF1bHRPcHRpb25zPzogRm9ybWx5RmllbGRDb25maWc7XG59XG5leHBvcnQgaW50ZXJmYWNlIFdyYXBwZXJPcHRpb24ge1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBjb21wb25lbnQ6IGFueTtcbiAgICB0eXBlcz86IHN0cmluZ1tdO1xufVxuZXhwb3J0IGludGVyZmFjZSBGaWVsZFZhbGlkYXRvckZuIHtcbiAgICAoYzogQWJzdHJhY3RDb250cm9sLCBmaWVsZDogRm9ybWx5RmllbGRDb25maWcsIG9wdGlvbnM/OiB7XG4gICAgICAgIFtpZDogc3RyaW5nXTogYW55O1xuICAgIH0pOiBWYWxpZGF0aW9uRXJyb3JzIHwgbnVsbDtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgVmFsaWRhdG9yT3B0aW9uIHtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgdmFsaWRhdGlvbjogRmllbGRWYWxpZGF0b3JGbjtcbiAgICBvcHRpb25zPzoge1xuICAgICAgICBbaWQ6IHN0cmluZ106IGFueTtcbiAgICB9O1xufVxuZXhwb3J0IGludGVyZmFjZSBFeHRlbnNpb25PcHRpb24ge1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBleHRlbnNpb246IEZvcm1seUV4dGVuc2lvbjtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgVmFsaWRhdGlvbk1lc3NhZ2VPcHRpb24ge1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBtZXNzYWdlOiBzdHJpbmcgfCAoKGVycm9yOiBhbnksIGZpZWxkOiBGb3JtbHlGaWVsZENvbmZpZykgPT4gc3RyaW5nIHwgT2JzZXJ2YWJsZTxzdHJpbmc+KTtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgTWFuaXB1bGF0b3JPcHRpb24ge1xuICAgIGNsYXNzPzoge1xuICAgICAgICBuZXcgKCk6IGFueTtcbiAgICB9O1xuICAgIG1ldGhvZD86IHN0cmluZztcbn1cbmV4cG9ydCBpbnRlcmZhY2UgTWFuaXB1bGF0b3JXcmFwcGVyIHtcbiAgICAoZjogRm9ybWx5RmllbGRDb25maWcpOiBzdHJpbmc7XG59XG5leHBvcnQgaW50ZXJmYWNlIFRlbXBsYXRlTWFuaXB1bGF0b3JzIHtcbiAgICBwcmVXcmFwcGVyPzogTWFuaXB1bGF0b3JXcmFwcGVyW107XG4gICAgcG9zdFdyYXBwZXI/OiBNYW5pcHVsYXRvcldyYXBwZXJbXTtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgQ29uZmlnT3B0aW9uIHtcbiAgICB0eXBlcz86IFR5cGVPcHRpb25bXTtcbiAgICB3cmFwcGVycz86IFdyYXBwZXJPcHRpb25bXTtcbiAgICB2YWxpZGF0b3JzPzogVmFsaWRhdG9yT3B0aW9uW107XG4gICAgZXh0ZW5zaW9ucz86IEV4dGVuc2lvbk9wdGlvbltdO1xuICAgIHZhbGlkYXRpb25NZXNzYWdlcz86IFZhbGlkYXRpb25NZXNzYWdlT3B0aW9uW107XG4gICAgLyoqIEBkZXByZWNhdGVkIHVzZSBgZXh0ZW5zaW9uc2AgaW5zdGVhZCAqL1xuICAgIG1hbmlwdWxhdG9ycz86IE1hbmlwdWxhdG9yT3B0aW9uW107XG4gICAgZXh0cmFzPzoge1xuICAgICAgICAvKiogQGRlcHJlY2F0ZWQgdXNlIGBleHRlbnNpb25zYCBpbnN0ZWFkICovXG4gICAgICAgIGZpZWxkVHJhbnNmb3JtPzogYW55O1xuICAgICAgICBpbW11dGFibGU/OiBib29sZWFuO1xuICAgICAgICBzaG93RXJyb3I/OiAoZmllbGQ6IEZpZWxkVHlwZSkgPT4gYm9vbGVhbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlZmluZXMgdGhlIG9wdGlvbiB3aGljaCBmb3JtbHkgcmVseSBvbiB0byBjaGVjayBmaWVsZCBleHByZXNzaW9uIHByb3BlcnRpZXMuXG4gICAgICAgICAqIC0gYG1vZGVsQ2hhbmdlYDogcGVyZm9ybSBhIGNoZWNrIHdoZW4gdGhlIHZhbHVlIG9mIHRoZSBmb3JtIGNvbnRyb2wgY2hhbmdlcyAoV2lsbCBiZSBzZXQgYnkgZGVmYXVsdCBpbiB0aGUgbmV4dCBtYWpvciB2ZXJzaW9uKS5cbiAgICAgICAgICogLSBgY2hhbmdlRGV0ZWN0aW9uQ2hlY2tgOiB0cmlnZ2VycyBhbiBpbW1lZGlhdGUgY2hlY2sgd2hlbiBgbmdEb0NoZWNrYCBpcyBjYWxsZWQuXG4gICAgICAgICAqXG4gICAgICAgICAqIERlZmF1bHRzIHRvIGBjaGFuZ2VEZXRlY3Rpb25DaGVja2AuXG4gICAgICAgICAqL1xuICAgICAgICBjaGVja0V4cHJlc3Npb25Pbj86ICdtb2RlbENoYW5nZScgfCAnY2hhbmdlRGV0ZWN0aW9uQ2hlY2snO1xuICAgICAgICAvKipcbiAgICAgICAgICogV2hldGhlciB0byBsYXppbHkgcmVuZGVyIGZpZWxkIGNvbXBvbmVudHMgb3Igbm90IHdoZW4gbWFya2VkIGFzIGhpZGRlbi5cbiAgICAgICAgICogLSBgdHJ1ZWA6IGxhemlseSByZW5kZXIgZmllbGQgY29tcG9uZW50cyAoV2lsbCBiZSBzZXQgYnkgZGVmYXVsdCBpbiB0aGUgbmV4dCBtYWpvciB2ZXJzaW9uKS5cbiAgICAgICAgICogLSBgZmFsc2VgOiByZW5kZXIgZmllbGQgY29tcG9uZW50cyBhbmQgdXNlIENTUyB0byBjb250cm9sIHRoZWlyIHZpc2liaWxpdHkuXG4gICAgICAgICAqXG4gICAgICAgICAqIERlZmF1bHRzIHRvIGBmYWxzZWAuXG4gICAgICAgICAqL1xuICAgICAgICBsYXp5UmVuZGVyPzogYm9vbGVhbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdoZW4gdHJ1ZSwgcmVzZXQgdGhlIHZhbHVlIG9mIGhpZGRlbiBmaWVsZHMuXG4gICAgICAgICAqXG4gICAgICAgICAqIERlZmF1bHRzIHRvIGBmYWxzZWAuXG4gICAgICAgICAqL1xuICAgICAgICByZXNldEZpZWxkT25IaWRlPzogYm9vbGVhbjtcbiAgICB9O1xufVxuIl19