import { FormlyFieldConfig } from '@ngx-formly/core';
import { JSONSchema7 } from 'json-schema';
import * as ɵngcc0 from '@angular/core';
export interface FormlyJsonschemaOptions {
    /**
     * allows to intercept the mapping, taking the already mapped
     * formly field and the original JSONSchema source from which it
     * was mapped.
     */
    map?: (mappedField: FormlyFieldConfig, mapSource: JSONSchema7) => FormlyFieldConfig;
}
export declare class FormlyJsonschema {
    toFieldConfig(schema: JSONSchema7, options?: FormlyJsonschemaOptions): FormlyFieldConfig;
    private _toFieldConfig;
    private resolveSchema;
    private resolveAllOf;
    private resolveMultiSchema;
    private resolveDefinition;
    private resolveDependencies;
    private guessType;
    private addValidator;
    private isEnum;
    private toEnumOptions;
    private isFieldValid;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<FormlyJsonschema, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<FormlyJsonschema>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybWx5LWpzb24tc2NoZW1hLnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsiZm9ybWx5LWpzb24tc2NoZW1hLnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGb3JtbHlGaWVsZENvbmZpZyB9IGZyb20gJ0BuZ3gtZm9ybWx5L2NvcmUnO1xuaW1wb3J0IHsgSlNPTlNjaGVtYTcgfSBmcm9tICdqc29uLXNjaGVtYSc7XG5leHBvcnQgaW50ZXJmYWNlIEZvcm1seUpzb25zY2hlbWFPcHRpb25zIHtcbiAgICAvKipcbiAgICAgKiBhbGxvd3MgdG8gaW50ZXJjZXB0IHRoZSBtYXBwaW5nLCB0YWtpbmcgdGhlIGFscmVhZHkgbWFwcGVkXG4gICAgICogZm9ybWx5IGZpZWxkIGFuZCB0aGUgb3JpZ2luYWwgSlNPTlNjaGVtYSBzb3VyY2UgZnJvbSB3aGljaCBpdFxuICAgICAqIHdhcyBtYXBwZWQuXG4gICAgICovXG4gICAgbWFwPzogKG1hcHBlZEZpZWxkOiBGb3JtbHlGaWVsZENvbmZpZywgbWFwU291cmNlOiBKU09OU2NoZW1hNykgPT4gRm9ybWx5RmllbGRDb25maWc7XG59XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBGb3JtbHlKc29uc2NoZW1hIHtcbiAgICB0b0ZpZWxkQ29uZmlnKHNjaGVtYTogSlNPTlNjaGVtYTcsIG9wdGlvbnM/OiBGb3JtbHlKc29uc2NoZW1hT3B0aW9ucyk6IEZvcm1seUZpZWxkQ29uZmlnO1xuICAgIHByaXZhdGUgX3RvRmllbGRDb25maWc7XG4gICAgcHJpdmF0ZSByZXNvbHZlU2NoZW1hO1xuICAgIHByaXZhdGUgcmVzb2x2ZUFsbE9mO1xuICAgIHByaXZhdGUgcmVzb2x2ZU11bHRpU2NoZW1hO1xuICAgIHByaXZhdGUgcmVzb2x2ZURlZmluaXRpb247XG4gICAgcHJpdmF0ZSByZXNvbHZlRGVwZW5kZW5jaWVzO1xuICAgIHByaXZhdGUgZ3Vlc3NUeXBlO1xuICAgIHByaXZhdGUgYWRkVmFsaWRhdG9yO1xuICAgIHByaXZhdGUgaXNFbnVtO1xuICAgIHByaXZhdGUgdG9FbnVtT3B0aW9ucztcbiAgICBwcml2YXRlIGlzRmllbGRWYWxpZDtcbn1cbiJdfQ==