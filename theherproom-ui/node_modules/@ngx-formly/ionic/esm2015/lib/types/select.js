/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component } from '@angular/core';
import { FieldType } from '@ngx-formly/core';
export class FormlyFieldSelect extends FieldType {
    constructor() {
        super(...arguments);
        this.defaultOptions = {
            templateOptions: {
                options: [],
                /**
                 * @param {?} o1
                 * @param {?} o2
                 * @return {?}
                 */
                compareWith(o1, o2) {
                    return o1 === o2;
                },
            },
        };
    }
}
FormlyFieldSelect.decorators = [
    { type: Component, args: [{
                selector: 'formly-field-ion-select',
                template: `
    <!-- ng-container used as a workaround for https://github.com/ionic-team/ionic/issues/19324 -->
    <ng-container *ngIf="to.options | formlySelectOptions:field | async; let selectOptions">
      <ion-select
        [style.align-self]="to.labelPosition === 'floating' ? 'stretch':''"
        [style.max-width.%]="to.labelPosition === 'floating' ? 100 : ''"

        [formControl]="formControl"
        [compareWith]="to.compareWith"
        [ionFormlyAttributes]="field"
        [multiple]="to.multiple"
        [interface]="to.interface"
        [okText]="to.okText"
        [cancelText]="to.cancelText">
        <ion-select-option *ngFor="let option of selectOptions" [value]="option.value" [disabled]="option.disabled">
            {{ option.label }}
        </ion-select-option>
      </ion-select>
    </ng-container>
  `,
                styles: [':host { display: inherit; }']
            }] }
];
if (false) {
    /** @type {?} */
    FormlyFieldSelect.prototype.defaultOptions;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5neC1mb3JtbHkvaW9uaWMvIiwic291cmNlcyI6WyJsaWIvdHlwZXMvc2VsZWN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzFDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQTBCN0MsTUFBTSxPQUFPLGlCQUFrQixTQUFRLFNBQVM7SUF4QmhEOztRQXlCRSxtQkFBYyxHQUFHO1lBQ2YsZUFBZSxFQUFFO2dCQUNmLE9BQU8sRUFBRSxFQUFFOzs7Ozs7Z0JBQ1gsV0FBVyxDQUFDLEVBQU8sRUFBRSxFQUFPO29CQUMxQixPQUFPLEVBQUUsS0FBSyxFQUFFLENBQUM7Z0JBQ25CLENBQUM7YUFDRjtTQUNGLENBQUM7SUFDSixDQUFDOzs7WUFqQ0EsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSx5QkFBeUI7Z0JBQ25DLFFBQVEsRUFBRTs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQW1CVDt5QkFDUSw2QkFBNkI7YUFDdkM7Ozs7SUFFQywyQ0FPRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRmllbGRUeXBlIH0gZnJvbSAnQG5neC1mb3JtbHkvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2Zvcm1seS1maWVsZC1pb24tc2VsZWN0JyxcbiAgdGVtcGxhdGU6IGBcbiAgICA8IS0tIG5nLWNvbnRhaW5lciB1c2VkIGFzIGEgd29ya2Fyb3VuZCBmb3IgaHR0cHM6Ly9naXRodWIuY29tL2lvbmljLXRlYW0vaW9uaWMvaXNzdWVzLzE5MzI0IC0tPlxuICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCJ0by5vcHRpb25zIHwgZm9ybWx5U2VsZWN0T3B0aW9uczpmaWVsZCB8IGFzeW5jOyBsZXQgc2VsZWN0T3B0aW9uc1wiPlxuICAgICAgPGlvbi1zZWxlY3RcbiAgICAgICAgW3N0eWxlLmFsaWduLXNlbGZdPVwidG8ubGFiZWxQb3NpdGlvbiA9PT0gJ2Zsb2F0aW5nJyA/ICdzdHJldGNoJzonJ1wiXG4gICAgICAgIFtzdHlsZS5tYXgtd2lkdGguJV09XCJ0by5sYWJlbFBvc2l0aW9uID09PSAnZmxvYXRpbmcnID8gMTAwIDogJydcIlxuXG4gICAgICAgIFtmb3JtQ29udHJvbF09XCJmb3JtQ29udHJvbFwiXG4gICAgICAgIFtjb21wYXJlV2l0aF09XCJ0by5jb21wYXJlV2l0aFwiXG4gICAgICAgIFtpb25Gb3JtbHlBdHRyaWJ1dGVzXT1cImZpZWxkXCJcbiAgICAgICAgW211bHRpcGxlXT1cInRvLm11bHRpcGxlXCJcbiAgICAgICAgW2ludGVyZmFjZV09XCJ0by5pbnRlcmZhY2VcIlxuICAgICAgICBbb2tUZXh0XT1cInRvLm9rVGV4dFwiXG4gICAgICAgIFtjYW5jZWxUZXh0XT1cInRvLmNhbmNlbFRleHRcIj5cbiAgICAgICAgPGlvbi1zZWxlY3Qtb3B0aW9uICpuZ0Zvcj1cImxldCBvcHRpb24gb2Ygc2VsZWN0T3B0aW9uc1wiIFt2YWx1ZV09XCJvcHRpb24udmFsdWVcIiBbZGlzYWJsZWRdPVwib3B0aW9uLmRpc2FibGVkXCI+XG4gICAgICAgICAgICB7eyBvcHRpb24ubGFiZWwgfX1cbiAgICAgICAgPC9pb24tc2VsZWN0LW9wdGlvbj5cbiAgICAgIDwvaW9uLXNlbGVjdD5cbiAgICA8L25nLWNvbnRhaW5lcj5cbiAgYCxcbiAgc3R5bGVzOiBbJzpob3N0IHsgZGlzcGxheTogaW5oZXJpdDsgfSddLFxufSlcbmV4cG9ydCBjbGFzcyBGb3JtbHlGaWVsZFNlbGVjdCBleHRlbmRzIEZpZWxkVHlwZSB7XG4gIGRlZmF1bHRPcHRpb25zID0ge1xuICAgIHRlbXBsYXRlT3B0aW9uczoge1xuICAgICAgb3B0aW9uczogW10sXG4gICAgICBjb21wYXJlV2l0aChvMTogYW55LCBvMjogYW55KSB7XG4gICAgICAgIHJldHVybiBvMSA9PT0gbzI7XG4gICAgICB9LFxuICAgIH0sXG4gIH07XG59XG4iXX0=