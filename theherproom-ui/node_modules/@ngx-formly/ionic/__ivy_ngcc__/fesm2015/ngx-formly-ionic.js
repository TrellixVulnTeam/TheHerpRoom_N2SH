import { CommonModule } from '@angular/common';
import { ReactiveFormsModule } from '@angular/forms';
import { IonicModule } from '@ionic/angular';
import { FormlySelectModule } from '@ngx-formly/core/select';
import { Component, Directive, Input, NgModule } from '@angular/core';
import { FieldType, FieldWrapper, FormlyAttributes, FormlyModule } from '@ngx-formly/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from '@ionic/angular';
import * as ɵngcc3 from '@angular/forms';
import * as ɵngcc4 from '@ngx-formly/core';
import * as ɵngcc5 from '@ngx-formly/core/select';

function FormlyFieldInput_ion_input_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "ion-input", 2);
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("type", ctx_r0.to.type || "text")("formControl", ctx_r0.formControl)("ionFormlyAttributes", ctx_r0.field);
} }
function FormlyFieldInput_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "ion-input", 3);
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("formControl", ctx_r2.formControl)("ionFormlyAttributes", ctx_r2.field);
} }
function FormlyFieldRadio_ion_item_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "ion-item", 3);
    ɵngcc0.ɵɵelementStart(1, "ion-label");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(3, "ion-radio", 4);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const option_r2 = ctx.$implicit;
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("disabled", option_r2.disabled || ctx_r0.formControl.disabled);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(option_r2.label);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("value", option_r2.value);
} }
function FormlyFieldRadio_ion_item_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "ion-item", 5);
    ɵngcc0.ɵɵelementStart(1, "ion-label");
    ɵngcc0.ɵɵelementStart(2, "ion-text", 6);
    ɵngcc0.ɵɵelementStart(3, "p");
    ɵngcc0.ɵɵelement(4, "formly-validation-message", 7);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("field", ctx_r1.field);
} }
function FormlyFieldSelect_ng_container_0_ion_select_option_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "ion-select-option", 3);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const option_r3 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("value", option_r3.value)("disabled", option_r3.disabled);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", option_r3.label, " ");
} }
function FormlyFieldSelect_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "ion-select", 1);
    ɵngcc0.ɵɵtemplate(2, FormlyFieldSelect_ng_container_0_ion_select_option_2_Template, 2, 3, "ion-select-option", 2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const selectOptions_r1 = ctx.$implicit;
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵstyleProp("align-self", ctx_r0.to.labelPosition === "floating" ? "stretch" : "")("max-width", ctx_r0.to.labelPosition === "floating" ? 100 : "", "%");
    ɵngcc0.ɵɵproperty("formControl", ctx_r0.formControl)("compareWith", ctx_r0.to.compareWith)("ionFormlyAttributes", ctx_r0.field)("multiple", ctx_r0.to.multiple)("interface", ctx_r0.to.interface)("okText", ctx_r0.to.okText)("cancelText", ctx_r0.to.cancelText);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", selectOptions_r1);
} }
function FormlyWrapperFormField_span_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1, "*");
    ɵngcc0.ɵɵelementEnd();
} }
function FormlyWrapperFormField_ng_template_4_Template(rf, ctx) { }
function FormlyWrapperFormField_ion_item_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "ion-item", 5);
    ɵngcc0.ɵɵelementStart(1, "ion-label");
    ɵngcc0.ɵɵelementStart(2, "ion-text", 6);
    ɵngcc0.ɵɵelementStart(3, "p");
    ɵngcc0.ɵɵelement(4, "formly-validation-message", 7);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("field", ctx_r3.field);
} }
class FormlyFieldInput extends FieldType {
}
FormlyFieldInput.ɵfac = function FormlyFieldInput_Factory(t) { return ɵFormlyFieldInput_BaseFactory(t || FormlyFieldInput); };
FormlyFieldInput.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FormlyFieldInput, selectors: [["formly-field-ion-input"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 2, consts: [[3, "type", "formControl", "ionFormlyAttributes", 4, "ngIf", "ngIfElse"], ["numberTmp", ""], [3, "type", "formControl", "ionFormlyAttributes"], ["type", "number", 3, "formControl", "ionFormlyAttributes"]], template: function FormlyFieldInput_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, FormlyFieldInput_ion_input_0_Template, 1, 3, "ion-input", 0);
        ɵngcc0.ɵɵtemplate(1, FormlyFieldInput_ng_template_1_Template, 1, 2, "ng-template", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r1 = ɵngcc0.ɵɵreference(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.to.type !== "number")("ngIfElse", _r1);
    } }, directives: function () { return [ɵngcc1.NgIf, ɵngcc2.IonInput, ɵngcc2.TextValueAccessor, ɵngcc3.NgControlStatus, ɵngcc3.FormControlDirective, IonFormlyAttributes, ɵngcc2.NumericValueAccessor]; }, styles: ["[_nghost-%COMP%] { display: inherit; }"] });
const ɵFormlyFieldInput_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(FormlyFieldInput);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormlyFieldInput, [{
        type: Component,
        args: [{
                selector: 'formly-field-ion-input',
                template: `
    <ion-input *ngIf="to.type !== 'number' else numberTmp" [type]="to.type || 'text'" [formControl]="formControl" [ionFormlyAttributes]="field"></ion-input>
    <ng-template #numberTmp>
      <ion-input type="number" [formControl]="formControl" [ionFormlyAttributes]="field"></ion-input>
    </ng-template>
  `,
                styles: [':host { display: inherit; }']
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FormlyFieldCheckbox extends FieldType {
}
FormlyFieldCheckbox.ɵfac = function FormlyFieldCheckbox_Factory(t) { return ɵFormlyFieldCheckbox_BaseFactory(t || FormlyFieldCheckbox); };
FormlyFieldCheckbox.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FormlyFieldCheckbox, selectors: [["formly-field-ion-checkbox"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 2, consts: [[3, "formControl", "ionFormlyAttributes"]], template: function FormlyFieldCheckbox_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelement(0, "ion-checkbox", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("formControl", ctx.formControl)("ionFormlyAttributes", ctx.field);
    } }, directives: function () { return [ɵngcc2.IonCheckbox, ɵngcc2.BooleanValueAccessor, ɵngcc3.NgControlStatus, ɵngcc3.FormControlDirective, IonFormlyAttributes]; }, encapsulation: 2 });
const ɵFormlyFieldCheckbox_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(FormlyFieldCheckbox);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormlyFieldCheckbox, [{
        type: Component,
        args: [{
                selector: 'formly-field-ion-checkbox',
                template: `
    <ion-checkbox
      [formControl]="formControl"
      [ionFormlyAttributes]="field">
    </ion-checkbox>
  `
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FormlyFieldDatetime extends FieldType {
}
FormlyFieldDatetime.ɵfac = function FormlyFieldDatetime_Factory(t) { return ɵFormlyFieldDatetime_BaseFactory(t || FormlyFieldDatetime); };
FormlyFieldDatetime.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FormlyFieldDatetime, selectors: [["formly-field-ion-datetime"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 18, consts: [[3, "cancelText", "dayNames", "dayShortNames", "dayValues", "displayFormat", "doneText", "hourValues", "minuteValues", "monthNames", "monthShortNames", "monthValues", "pickerFormat", "pickerOptions", "yearValues", "min", "max", "formControl", "ionFormlyAttributes"]], template: function FormlyFieldDatetime_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelement(0, "ion-datetime", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("cancelText", ctx.to.cancelText)("dayNames", ctx.to.dayNames)("dayShortNames", ctx.to.dayShortNames)("dayValues", ctx.to.dayValues)("displayFormat", ctx.to.displayFormat)("doneText", ctx.to.doneText)("hourValues", ctx.to.hourValues)("minuteValues", ctx.to.minuteValues)("monthNames", ctx.to.monthNames)("monthShortNames", ctx.to.monthShortNames)("monthValues", ctx.to.monthValues)("pickerFormat", ctx.to.pickerFormat)("pickerOptions", ctx.to.pickerOptions)("yearValues", ctx.to.yearValues)("min", ctx.to.min)("max", ctx.to.max)("formControl", ctx.formControl)("ionFormlyAttributes", ctx.field);
    } }, directives: function () { return [ɵngcc2.IonDatetime, ɵngcc2.SelectValueAccessor, ɵngcc3.NgControlStatus, ɵngcc3.FormControlDirective, IonFormlyAttributes]; }, encapsulation: 2 });
const ɵFormlyFieldDatetime_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(FormlyFieldDatetime);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormlyFieldDatetime, [{
        type: Component,
        args: [{
                selector: 'formly-field-ion-datetime',
                template: `
    <ion-datetime
      [cancelText]="to.cancelText"
      [dayNames]="to.dayNames"
      [dayShortNames]="to.dayShortNames"
      [dayValues]="to.dayValues"
      [displayFormat]="to.displayFormat"
      [doneText]="to.doneText"
      [hourValues]="to.hourValues"
      [minuteValues]="to.minuteValues"
      [monthNames]="to.monthNames"
      [monthShortNames]="to.monthShortNames"
      [monthValues]="to.monthValues"
      [pickerFormat]="to.pickerFormat"
      [pickerOptions]="to.pickerOptions"
      [yearValues]="to.yearValues"
      [min]="to.min"
      [max]="to.max"
      [formControl]="formControl"
      [ionFormlyAttributes]="field">
    </ion-datetime>
  `
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FormlyFieldRadio extends FieldType {
    constructor() {
        super(...arguments);
        this.defaultOptions = {
            templateOptions: { options: [] },
        };
    }
}
FormlyFieldRadio.ɵfac = function FormlyFieldRadio_Factory(t) { return ɵFormlyFieldRadio_BaseFactory(t || FormlyFieldRadio); };
FormlyFieldRadio.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FormlyFieldRadio, selectors: [["formly-field-ion-radio"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 8, vars: 10, consts: [[3, "formControl", "ionFormlyAttributes"], [3, "disabled", 4, "ngFor", "ngForOf"], ["lines", "none", 4, "ngIf"], [3, "disabled"], [3, "value"], ["lines", "none"], ["color", "danger"], [3, "field"]], template: function FormlyFieldRadio_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "ion-list");
        ɵngcc0.ɵɵelementStart(1, "ion-radio-group", 0);
        ɵngcc0.ɵɵelementStart(2, "ion-list-header");
        ɵngcc0.ɵɵtext(3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(4, FormlyFieldRadio_ion_item_4_Template, 4, 3, "ion-item", 1);
        ɵngcc0.ɵɵpipe(5, "async");
        ɵngcc0.ɵɵpipe(6, "formlySelectOptions");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(7, FormlyFieldRadio_ion_item_7_Template, 5, 1, "ion-item", 2);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("formControl", ctx.formControl)("ionFormlyAttributes", ctx.field);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate(ctx.to.label);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpipeBind1(5, 5, ɵngcc0.ɵɵpipeBind2(6, 7, ctx.to.options, ctx.field)));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showError);
    } }, directives: function () { return [ɵngcc2.IonList, ɵngcc2.IonRadioGroup, ɵngcc2.SelectValueAccessor, ɵngcc3.NgControlStatus, ɵngcc3.FormControlDirective, IonFormlyAttributes, ɵngcc2.IonListHeader, ɵngcc1.NgForOf, ɵngcc1.NgIf, ɵngcc2.IonItem, ɵngcc2.IonLabel, ɵngcc2.IonRadio, ɵngcc2.RadioValueAccessor, ɵngcc2.IonText, ɵngcc4.ɵc]; }, pipes: function () { return [ɵngcc1.AsyncPipe, ɵngcc5.ɵa]; }, encapsulation: 2 });
const ɵFormlyFieldRadio_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(FormlyFieldRadio);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormlyFieldRadio, [{
        type: Component,
        args: [{
                selector: 'formly-field-ion-radio',
                template: `
    <ion-list>
      <ion-radio-group
        [formControl]="formControl"
        [ionFormlyAttributes]="field">
        <ion-list-header>{{ to.label }}</ion-list-header>
        <ion-item *ngFor="let option of to.options | formlySelectOptions:field | async" [disabled]="option.disabled || formControl.disabled">
          <ion-label>{{ option.label }}</ion-label>
          <ion-radio [value]="option.value"></ion-radio>
        </ion-item>
      </ion-radio-group>
    </ion-list>
    <ion-item lines="none" *ngIf="showError">
      <ion-label>
        <ion-text color="danger">
          <p>
            <formly-validation-message [field]="field"></formly-validation-message>
          </p>
        </ion-text>
      </ion-label>
    </ion-item>
  `
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FormlyFieldToggle extends FieldType {
}
FormlyFieldToggle.ɵfac = function FormlyFieldToggle_Factory(t) { return ɵFormlyFieldToggle_BaseFactory(t || FormlyFieldToggle); };
FormlyFieldToggle.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FormlyFieldToggle, selectors: [["formly-field-ion-toggle"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 2, consts: [[3, "formControl", "ionFormlyAttributes"]], template: function FormlyFieldToggle_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelement(0, "ion-toggle", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("formControl", ctx.formControl)("ionFormlyAttributes", ctx.field);
    } }, directives: function () { return [ɵngcc2.IonToggle, ɵngcc2.BooleanValueAccessor, ɵngcc3.NgControlStatus, ɵngcc3.FormControlDirective, IonFormlyAttributes]; }, encapsulation: 2 });
const ɵFormlyFieldToggle_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(FormlyFieldToggle);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormlyFieldToggle, [{
        type: Component,
        args: [{
                selector: 'formly-field-ion-toggle',
                template: `
    <ion-toggle
      [formControl]="formControl"
      [ionFormlyAttributes]="field">
    </ion-toggle>
  `
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FormlyFieldSelect extends FieldType {
    constructor() {
        super(...arguments);
        this.defaultOptions = {
            templateOptions: {
                options: [],
                /**
                 * @param {?} o1
                 * @param {?} o2
                 * @return {?}
                 */
                compareWith(o1, o2) {
                    return o1 === o2;
                },
            },
        };
    }
}
FormlyFieldSelect.ɵfac = function FormlyFieldSelect_Factory(t) { return ɵFormlyFieldSelect_BaseFactory(t || FormlyFieldSelect); };
FormlyFieldSelect.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FormlyFieldSelect, selectors: [["formly-field-ion-select"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 6, consts: [[4, "ngIf"], [3, "formControl", "compareWith", "ionFormlyAttributes", "multiple", "interface", "okText", "cancelText"], [3, "value", "disabled", 4, "ngFor", "ngForOf"], [3, "value", "disabled"]], template: function FormlyFieldSelect_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, FormlyFieldSelect_ng_container_0_Template, 3, 12, "ng-container", 0);
        ɵngcc0.ɵɵpipe(1, "async");
        ɵngcc0.ɵɵpipe(2, "formlySelectOptions");
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(1, 1, ɵngcc0.ɵɵpipeBind2(2, 3, ctx.to.options, ctx.field)));
    } }, directives: function () { return [ɵngcc1.NgIf, ɵngcc2.IonSelect, ɵngcc2.SelectValueAccessor, ɵngcc3.NgControlStatus, ɵngcc3.FormControlDirective, IonFormlyAttributes, ɵngcc1.NgForOf, ɵngcc2.IonSelectOption]; }, pipes: function () { return [ɵngcc1.AsyncPipe, ɵngcc5.ɵa]; }, styles: ["[_nghost-%COMP%] { display: inherit; }"] });
const ɵFormlyFieldSelect_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(FormlyFieldSelect);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormlyFieldSelect, [{
        type: Component,
        args: [{
                selector: 'formly-field-ion-select',
                template: `
    <!-- ng-container used as a workaround for https://github.com/ionic-team/ionic/issues/19324 -->
    <ng-container *ngIf="to.options | formlySelectOptions:field | async; let selectOptions">
      <ion-select
        [style.align-self]="to.labelPosition === 'floating' ? 'stretch':''"
        [style.max-width.%]="to.labelPosition === 'floating' ? 100 : ''"

        [formControl]="formControl"
        [compareWith]="to.compareWith"
        [ionFormlyAttributes]="field"
        [multiple]="to.multiple"
        [interface]="to.interface"
        [okText]="to.okText"
        [cancelText]="to.cancelText">
        <ion-select-option *ngFor="let option of selectOptions" [value]="option.value" [disabled]="option.disabled">
            {{ option.label }}
        </ion-select-option>
      </ion-select>
    </ng-container>
  `,
                styles: [':host { display: inherit; }']
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FormlyFieldRange extends FieldType {
}
FormlyFieldRange.ɵfac = function FormlyFieldRange_Factory(t) { return ɵFormlyFieldRange_BaseFactory(t || FormlyFieldRange); };
FormlyFieldRange.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FormlyFieldRange, selectors: [["formly-field-ion-range"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 5, vars: 6, consts: [[3, "min", "max", "formControl", "ionFormlyAttributes"], ["slot", "start"], ["slot", "end"]], template: function FormlyFieldRange_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "ion-range", 0);
        ɵngcc0.ɵɵelementStart(1, "ion-label", 1);
        ɵngcc0.ɵɵtext(2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(3, "ion-label", 2);
        ɵngcc0.ɵɵtext(4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("min", ctx.to.min)("max", ctx.to.max)("formControl", ctx.formControl)("ionFormlyAttributes", ctx.field);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate(ctx.to.min);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate(ctx.to.max);
    } }, directives: function () { return [ɵngcc2.IonRange, ɵngcc2.SelectValueAccessor, ɵngcc3.NgControlStatus, ɵngcc3.FormControlDirective, IonFormlyAttributes, ɵngcc2.IonLabel]; }, styles: ["[_nghost-%COMP%] { display: inherit; }"] });
const ɵFormlyFieldRange_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(FormlyFieldRange);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormlyFieldRange, [{
        type: Component,
        args: [{
                selector: 'formly-field-ion-range',
                template: `
    <ion-range
      [min]="to.min"
      [max]="to.max"
      [formControl]="formControl"
      [ionFormlyAttributes]="field">
      <ion-label slot="start">{{ to.min }}</ion-label>
      <ion-label slot="end">{{ to.max }}</ion-label>
    </ion-range>
  `,
                styles: [':host { display: inherit; }']
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FormlyFieldTextArea extends FieldType {
}
FormlyFieldTextArea.ɵfac = function FormlyFieldTextArea_Factory(t) { return ɵFormlyFieldTextArea_BaseFactory(t || FormlyFieldTextArea); };
FormlyFieldTextArea.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FormlyFieldTextArea, selectors: [["formly-field-ion-textarea"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 4, consts: [[3, "formControl", "ionFormlyAttributes", "cols", "rows"]], template: function FormlyFieldTextArea_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelement(0, "ion-textarea", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("formControl", ctx.formControl)("ionFormlyAttributes", ctx.field)("cols", ctx.to.cols)("rows", ctx.to.rows);
    } }, directives: function () { return [ɵngcc2.IonTextarea, ɵngcc2.TextValueAccessor, ɵngcc3.NgControlStatus, ɵngcc3.FormControlDirective, IonFormlyAttributes]; }, styles: ["[_nghost-%COMP%] { display: inherit; }"] });
const ɵFormlyFieldTextArea_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(FormlyFieldTextArea);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormlyFieldTextArea, [{
        type: Component,
        args: [{
                selector: 'formly-field-ion-textarea',
                template: `
    <ion-textarea
      [formControl]="formControl"
      [ionFormlyAttributes]="field"
      [cols]="to.cols"
      [rows]="to.rows">
    </ion-textarea>
  `,
                styles: [':host { display: inherit; }']
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FormlyWrapperFormField extends FieldWrapper {
}
FormlyWrapperFormField.ɵfac = function FormlyWrapperFormField_Factory(t) { return ɵFormlyWrapperFormField_BaseFactory(t || FormlyWrapperFormField); };
FormlyWrapperFormField.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FormlyWrapperFormField, selectors: [["formly-wrapper-ion-form-field"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 7, vars: 5, consts: [[3, "lines"], [3, "position"], [4, "ngIf"], ["fieldComponent", ""], ["lines", "none", 4, "ngIf"], ["lines", "none"], ["color", "danger"], [3, "field"]], template: function FormlyWrapperFormField_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "ion-item", 0);
        ɵngcc0.ɵɵelementStart(1, "ion-label", 1);
        ɵngcc0.ɵɵtext(2);
        ɵngcc0.ɵɵtemplate(3, FormlyWrapperFormField_span_3_Template, 2, 0, "span", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(4, FormlyWrapperFormField_ng_template_4_Template, 0, 0, "ng-template", null, 3, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(6, FormlyWrapperFormField_ion_item_6_Template, 5, 1, "ion-item", 4);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("lines", ctx.to.itemLines);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("position", ctx.to.labelPosition);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.to.label, " ");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.to.required && ctx.to.hideRequiredMarker !== true);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showError);
    } }, directives: [ɵngcc2.IonItem, ɵngcc2.IonLabel, ɵngcc1.NgIf, ɵngcc2.IonText, ɵngcc4.ɵc], encapsulation: 2 });
const ɵFormlyWrapperFormField_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(FormlyWrapperFormField);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormlyWrapperFormField, [{
        type: Component,
        args: [{
                selector: 'formly-wrapper-ion-form-field',
                template: `
    <ion-item [lines]="to.itemLines">
      <ion-label [position]="to.labelPosition">
        {{ to.label }}
        <span *ngIf="to.required && to.hideRequiredMarker !== true">*</span>
      </ion-label>
      <ng-template #fieldComponent></ng-template>
    </ion-item>
    <ion-item lines="none" *ngIf="showError">
      <ion-label>
        <ion-text color="danger">
          <p>
            <formly-validation-message [field]="field"></formly-validation-message>
          </p>
        </ion-text>
      </ion-label>
    </ion-item>
  `
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const FIELD_TYPE_COMPONENTS = [
    // types
    FormlyFieldInput,
    FormlyFieldCheckbox,
    FormlyFieldDatetime,
    FormlyFieldRadio,
    FormlyFieldToggle,
    FormlyFieldSelect,
    FormlyFieldRange,
    FormlyFieldTextArea,
    // wrappers
    FormlyWrapperFormField,
];
/** @type {?} */
const IONIC_FORMLY_CONFIG = {
    types: [
        {
            name: 'input',
            component: FormlyFieldInput,
            wrappers: ['form-field'],
        },
        {
            name: 'checkbox',
            component: FormlyFieldCheckbox,
            wrappers: ['form-field'],
        },
        {
            name: 'datetime',
            component: FormlyFieldDatetime,
            wrappers: ['form-field'],
        },
        {
            name: 'radio',
            component: FormlyFieldRadio,
            wrappers: [],
        },
        {
            name: 'toggle',
            component: FormlyFieldToggle,
            wrappers: ['form-field'],
        },
        {
            name: 'select',
            component: FormlyFieldSelect,
            wrappers: ['form-field'],
        },
        {
            name: 'range',
            component: FormlyFieldRange,
            wrappers: ['form-field'],
        },
        {
            name: 'textarea',
            component: FormlyFieldTextArea,
            wrappers: ['form-field'],
        },
    ],
    wrappers: [
        { name: 'form-field', component: FormlyWrapperFormField },
    ],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class IonFormlyAttributes extends FormlyAttributes {
    /**
     * @param {?} element
     * @param {?} value
     * @return {?}
     */
    focusElement(element, value) {
        if (!element.setFocus || !value) {
            return;
        }
        if (!element.getInputElement()) {
            setTimeout((/**
             * @return {?}
             */
            () => element.setFocus()), 300);
        }
        else {
            element.setFocus();
        }
    }
}
IonFormlyAttributes.ɵfac = function IonFormlyAttributes_Factory(t) { return ɵIonFormlyAttributes_BaseFactory(t || IonFormlyAttributes); };
IonFormlyAttributes.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: IonFormlyAttributes, selectors: [["", "ionFormlyAttributes", ""]], hostBindings: function IonFormlyAttributes_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("ionFocus", function IonFormlyAttributes_ionFocus_HostBindingHandler($event) { return ctx.onFocus($event); })("ionBlur", function IonFormlyAttributes_ionBlur_HostBindingHandler($event) { return ctx.onBlur($event); })("ionChange", function IonFormlyAttributes_ionChange_HostBindingHandler($event) { return ctx.onChange($event); });
    } }, inputs: { field: ["ionFormlyAttributes", "field"] }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
IonFormlyAttributes.propDecorators = {
    field: [{ type: Input, args: ['ionFormlyAttributes',] }]
};
const ɵIonFormlyAttributes_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(IonFormlyAttributes);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IonFormlyAttributes, [{
        type: Directive,
        args: [{
                // tslint:disable-next-line
                selector: '[ionFormlyAttributes]',
                host: {
                    '(ionFocus)': 'onFocus($event)',
                    '(ionBlur)': 'onBlur($event)',
                    '(ionChange)': 'onChange($event)'
                }
            }]
    }], null, { field: [{
            type: Input,
            args: ['ionFormlyAttributes']
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FormlyIonicModule {
}
FormlyIonicModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: FormlyIonicModule });
FormlyIonicModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function FormlyIonicModule_Factory(t) { return new (t || FormlyIonicModule)(); }, imports: [[
            CommonModule,
            IonicModule,
            ReactiveFormsModule,
            FormlySelectModule,
            FormlyModule.forChild(IONIC_FORMLY_CONFIG),
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(FormlyIonicModule, { declarations: function () { return [FormlyFieldInput,
        FormlyFieldCheckbox,
        FormlyFieldDatetime,
        FormlyFieldRadio,
        FormlyFieldToggle,
        FormlyFieldSelect,
        FormlyFieldRange,
        FormlyFieldTextArea,
        FormlyWrapperFormField,
        IonFormlyAttributes]; }, imports: function () { return [CommonModule,
        IonicModule,
        ReactiveFormsModule,
        FormlySelectModule, ɵngcc4.FormlyModule]; }, exports: function () { return [IonFormlyAttributes]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormlyIonicModule, [{
        type: NgModule,
        args: [{
                declarations: [FIELD_TYPE_COMPONENTS, IonFormlyAttributes],
                imports: [
                    CommonModule,
                    IonicModule,
                    ReactiveFormsModule,
                    FormlySelectModule,
                    FormlyModule.forChild(IONIC_FORMLY_CONFIG),
                ],
                exports: [IonFormlyAttributes]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { FormlyIonicModule, FormlyFieldInput, FormlyFieldCheckbox, FormlyFieldDatetime, FormlyFieldRadio, FormlyFieldToggle, FormlyFieldSelect, FormlyFieldRange, FormlyFieldTextArea, FormlyWrapperFormField, IonFormlyAttributes as ɵc, FIELD_TYPE_COMPONENTS as ɵa, IONIC_FORMLY_CONFIG as ɵb };

//# sourceMappingURL=ngx-formly-ionic.js.map