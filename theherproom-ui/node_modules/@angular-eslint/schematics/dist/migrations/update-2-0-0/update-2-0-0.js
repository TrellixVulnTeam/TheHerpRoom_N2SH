"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const tasks_1 = require("@angular-devkit/schematics/tasks");
const utils_1 = require("../../utils");
const updatedAngularESLintVersion = '^2.0.0';
const updatedTypeScriptESLintVersion = '4.16.1';
function updateIfExists(deps, depName, updatedVersion) {
    if (deps === null || deps === void 0 ? void 0 : deps[depName]) {
        deps[depName] = updatedVersion;
    }
}
function updateRelevantDependencies(host, context) {
    return utils_1.updateJsonInTree('package.json', (json) => {
        /**
         * @angular-eslint
         */
        updateIfExists(json.devDependencies, '@angular-eslint/builder', updatedAngularESLintVersion);
        updateIfExists(json.devDependencies, '@angular-eslint/eslint-plugin', updatedAngularESLintVersion);
        updateIfExists(json.devDependencies, '@angular-eslint/eslint-plugin-template', updatedAngularESLintVersion);
        updateIfExists(json.devDependencies, '@angular-eslint/template-parser', updatedAngularESLintVersion);
        /**
         * @typescript-eslint
         */
        updateIfExists(json.devDependencies, '@typescript-eslint/parser', updatedTypeScriptESLintVersion);
        updateIfExists(json.devDependencies, '@typescript-eslint/eslint-plugin', updatedTypeScriptESLintVersion);
        context.addTask(new tasks_1.NodePackageInstallTask());
        return json;
    })(host, context);
}
function removeRuleFromESLintConfig(ruleName, config) {
    if (config.rules && config.rules[ruleName]) {
        delete config.rules[ruleName];
    }
    if (config.overrides) {
        for (const override of config.overrides) {
            if (override.rules && override.rules[ruleName]) {
                delete override.rules[ruleName];
            }
        }
    }
}
function removeUsePipeDecorator(host) {
    const angularJSON = utils_1.readJsonInTree(host, 'angular.json');
    const rules = [
        // Remove from root config
        utils_1.updateJsonInTree('.eslintrc.json', (json) => {
            removeRuleFromESLintConfig('use-pipe-decorator', json);
            return json;
        }),
    ];
    for (const projectName of Object.keys(angularJSON.projects)) {
        const allSourceFilesForProject = utils_1.getAllSourceFilesForProject(host, projectName);
        const projectESLintConfigPath = allSourceFilesForProject.find((f) => f.endsWith('.eslintrc.json'));
        if (!projectESLintConfigPath) {
            continue;
        }
        rules.push(
        // Remove from project configs
        utils_1.updateJsonInTree(projectESLintConfigPath.toString(), (json) => {
            removeRuleFromESLintConfig('use-pipe-decorator', json);
            return json;
        }));
    }
    return schematics_1.chain(rules);
}
function default_1() {
    return schematics_1.chain([updateRelevantDependencies, removeUsePipeDecorator]);
}
exports.default = default_1;
